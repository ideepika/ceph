import json
import logging

from ceph.deployment.service_spec import IscsiServiceSpec

from .cephadmservice import CephadmService
from .. import utils

logger = logging.getLogger(__name__)


class IscsiService(CephadmService):
    def config(self, spec: IscsiServiceSpec):
        self.mgr._check_pool_exists(spec.pool, spec.service_name())

        logger.info('Saving service %s spec with placement %s' % (
            spec.service_name(), spec.placement.pretty_str()))
        self.mgr.spec_store.save(spec)

    def create(self, igw_id, host, spec) -> str:
        ret, keyring, err = self.mgr.check_mon_command({
            'prefix': 'auth get-or-create',
            'entity': utils.name_to_auth_entity('iscsi') + '.' + igw_id,
            'caps': ['mon', 'profile rbd, '
                            'allow command "osd blacklist", '
                            'allow command "config-key get" with "key" prefix "iscsi/"',
                     'osd', f'allow rwx pool={spec.pool}'],
        })

        if spec.ssl_cert:
            if isinstance(spec.ssl_cert, list):
                cert_data = '\n'.join(spec.ssl_cert)
            else:
                cert_data = spec.ssl_cert
            ret, out, err = self.mgr.mon_command({
                'prefix': 'config-key set',
                'key': f'iscsi/{utils.name_to_config_section("iscsi")}.{igw_id}/iscsi-gateway.crt',
                'val': cert_data,
            })

        if spec.ssl_key:
            if isinstance(spec.ssl_key, list):
                key_data = '\n'.join(spec.ssl_key)
            else:
                key_data = spec.ssl_key
            ret, out, err = self.mgr.mon_command({
                'prefix': 'config-key set',
                'key': f'iscsi/{utils.name_to_config_section("iscsi")}.{igw_id}/iscsi-gateway.key',
                'val': key_data,
            })

        api_secure = 'false' if spec.api_secure is None else spec.api_secure
        igw_conf = f"""
        # generated by cephadm
        [config]
        cluster_client_name = {utils.name_to_config_section('iscsi')}.{igw_id}
        pool = {spec.pool}
        trusted_ip_list = {spec.trusted_ip_list or ''}
        minimum_gateways = 1
        api_port = {spec.api_port or ''}
        api_user = {spec.api_user or ''}
        api_password = {spec.api_password or ''}
        api_secure = {api_secure}
        log_to_stderr = True
        log_to_stderr_prefix = debug
        log_to_file = False
        """
        extra_config = {'iscsi-gateway.cfg': igw_conf}
        return self.mgr._create_daemon('iscsi', igw_id, host, keyring=keyring,
                                   extra_config=extra_config)
